pipeline {
  agent none

  options {
    ansiColor("xterm")
    timeout(time: 4, unit: "HOURS")
    timestamps()
  }

  parameters {
    booleanParam(
      name: "PUBLIC_BUILD",
      defaultValue: false,
      description: "Build the public version of Barista"
    )
  }

  environment {
    WORKSPACE_DIR = "/home/dynatrace"
    BARISTA_PATH = "barista"
    ICONS_PATH = "barista-icons"
    FRONTEND_IMAGE_NAME = "designops/barista-app-frontend"
    BITBUCKET_URL = credentials("bitbucket-url")
    DOCKER_REGISTRY = credentials("docker-registry")
  }

  stages {

    stage("Build Barista") {
      agent {
        node {
          label "k8s-barista-builder"
        }
      }

      stages {
        stage("Checkout barista icons") {
          steps {
            checkout changelog: false, poll: false, scm: [
              $class: "GitSCM",
              branches: [[name: "*/master"]],
              doGenerateSubmoduleConfigurations: false,
              extensions: [[$class: "RelativeTargetDirectory", relativeTargetDir: "$ICONS_PATH"]],
              submoduleCfg: [], userRemoteConfigs: [[url: "${BITBUCKET_URL}scm/wx/barista-icons.git" ]]
            ]
          }
        }

        stage("Internal Preparations") {
          when {
            expression { return !params.PUBLIC_BUILD }
          }
          environment {
            BARISTA_SEARCH_ENDPOINT = credentials('barista-search-endpoint')
            ENVIRONMENT_FILE = 'apps/barista-design-system/src/environments/environment.internal.ts'
          }
          steps {
            dir(BARISTA_PATH) {
              script {
                def text = readFile(file: "${ENVIRONMENT_FILE}")
                text = text.replaceAll("\\{\\{BARISTA_INTERNAL_SEARCH_ENDPOINT\\}\\}", "${BARISTA_SEARCH_ENDPOINT}")
                echo text
                writeFile(file: "${ENVIRONMENT_FILE}",  text: text)
              }
            }
          }
        }

        stage("Prepare Workspace") {
          steps {

            sh'''
              files="node_modules dist package-lock.sha1"

              for file in $files
              do
                ln -s "$WORKSPACE_DIR/$file" "$PWD/$BARISTA_PATH/$file"
              done
            '''

            dir(BARISTA_PATH) {

              script {
                def oldsha = readFile(file: "package-lock.sha1").replace('./package-lock.json', '').trim()
                def sha1sum = sha1(file: "package-lock.json")

                if (!oldsha.equals(sha1sum)) {
                  echo "⚠️ Need to install packages due to updated package-lock.json"

                  sh '''
                    npm ci --ignore-scripts
                  '''
                }
              }
            }

            script {
              if (params.PUBLIC_BUILD ==~ /(?i)(Y|YES|T|TRUE|ON|RUN)/ ) {
                echo "Public build - Replace internal iconpack with public ones."
                dir(WORKSPACE_DIR) {
                  sh '''
                    rm -rf ./node_modules/@dynatrace/barista-icons
                    cp -R ./dist/tmp/barista-icons-public ./node_modules/@dynatrace/barista-icons
                  '''
                 }
              }
            }

            dir(BARISTA_PATH) {
              configFileProvider([
                configFile(fileId: "barista-env", variable: "ENV")
              ]) {
                sh """
                  mv $ENV .env

                  echo "PUBLIC_BUILD=${PUBLIC_BUILD}" >> .env

                  cat .env
                """
              }
            }
          }
        }

        stage("Build Barista") {
          steps {
            dir(BARISTA_PATH) {
              sh '''
                npm run ng run examples-tools:build
                npm run ng run barista-tools:build

                node dist/libs/tools/examples-tools/main.js
                node dist/libs/tools/barista/main.js

                if $PUBLIC_BUILD ; then
                  configuration='production'
                else
                  configuration='production-internal'

                  # Build next section of the design system
                  node \
                  --max_old_space_size=8192 \
                  ./node_modules/.bin/ng run next:build:production-internal
                fi

                cat dist/barista-data/routes.txt

                node \
                  --max_old_space_size=8192 \
                  ./node_modules/.bin/ng run barista-design-system:build:${configuration}
              '''

              dir('dist') {
                stash name: 'dist', useDefaultExcludes: false
              }

              dir('.deployment') {
                stash name: 'deployment'
              }

              stash name: 'public-deployment', includes: 'now.json'
            }

          }
        }
      }

      post {
        always {
          cleanWs deleteDirs: true
        }
      }
    }

    stage("Deploy Barista Public") {
      when {
        expression { return params.PUBLIC_BUILD }
      }
      agent {
        node {
          label "k8s-barista-builder"
        }
      }

      options {
        skipDefaultCheckout true
      }

      stages {
        stage("Deploy to Zeit") {
          environment {
            ZEIT_TOKEN = credentials("barista-zeit-deployment-token")
          }
          steps {
            dir(BARISTA_PATH) {
              configFileProvider([
                configFile(fileId: "now-project-json", variable: "NOW_PROJECT")
              ]) {
                sh '''
                  mkdir .now
                  mv "$NOW_PROJECT" .now/project.json
                '''
              }
              // Restore stashed dist for barista
              unstash "public-deployment"

              dir('dist') {
                unstash "dist"
                // rename folder for zeit deployment
                sh "mv apps/barista-design-system/browser apps/barista-design-system/barista"
              }

              sh "now --confirm -t $ZEIT_TOKEN ./dist/apps/barista-design-system/barista"
            }
          }
        }
      }

      post {
        always {
          cleanWs deleteDirs: true
        }
      }
    }

    stage("Deploy Barista Internal") {
      when {
        expression { return !params.PUBLIC_BUILD }
      }
      agent {
        node {
          label "k8s-docker"
        }
      }

      options {
        skipDefaultCheckout true
      }

      stages {
        stage("Build Docker image") {
          steps {
            dir(BARISTA_PATH) {
              // Restore stashed dist for barista
              dir('dist') {
                unstash "dist"
              }
              dir('.deployment') {
                unstash "deployment"
              }

              sh """
                docker build \
                  --no-cache \
                  --pull \
                  -t ${env.DOCKER_REGISTRY}/${FRONTEND_IMAGE_NAME}:${BUILD_NUMBER} \
                  . \
                  -f .deployment/barista/barista-internal.Dockerfile
              """
            }
          }
        }

        stage("Tag Docker image") {
          steps {
            sh """
              docker tag \
                ${env.DOCKER_REGISTRY}/${FRONTEND_IMAGE_NAME}:${BUILD_NUMBER} \
                ${env.DOCKER_REGISTRY}/${FRONTEND_IMAGE_NAME}:latest
            """
          }
        }

        stage("Push image to Registry") {
          environment {
            DOCKER_CRED = credentials('robot-designops-harbor')
          }
          steps {
            sh """
              docker login -u \'${DOCKER_CRED_USR}\' -p ${DOCKER_CRED_PSW} ${env.DOCKER_REGISTRY}

              docker push ${env.DOCKER_REGISTRY}/${FRONTEND_IMAGE_NAME}:${BUILD_NUMBER}
              docker push ${env.DOCKER_REGISTRY}/${FRONTEND_IMAGE_NAME}:latest
            """
          }
        }

        stage("Deploy to Kubernetes") {
          environment {
            K8S_TOKEN = credentials("barista-deployer")
            K8S_API = credentials("k8-api")
          }
          steps {
            sh """
              kubectl -n barista set image deployment/barista-frontend \
                barista-frontend=${env.DOCKER_REGISTRY}/${env.FRONTEND_IMAGE_NAME}:${env.BUILD_NUMBER} \
                --server=\'${env.K8S_API}\' \
                --token=\'${env.K8S_TOKEN}\'
            """
          }
        }

      }

      post {
        always {
          cleanWs deleteDirs: true
        }
      }
    }

  }
}




